pipeline {
    agent any 
    environment {
	// initialize the variables

		repoPAth = "${gitOwner}/${repoName}"
		init = "true"
		repo_user = "SanthoshKumarHN"
		PAT= "test"
		AZURE_TOKEN= "test"
		devUser= "test"
		featureBranchName= "test"
		HOME_DIR= "${WORKSPACE}/../"
		workingDirectory = "${WORKSPACE}"
		
 		}
    stages {
	 stage('InitialiseRepo'){
            steps {
		script{

		echo "$WORKSPACE"
		echo "${CUSTOMWORKSPACE}"
		echo "Copy to the repo to custom workspace"
		
		sh '''
		#cp -r "$WORKSPACE" "${CUSTOMWORKSPACE}"
		#cd "${CUSTOMWORKSPACE}/${JOB_BASE_NAME}"
		pwd
		ls -ltr '''
		script {


		source_environment_hostname = sh ( returnStdout: true, script: '''yq -e ".tenant.hostname" configs/play.yml ''' )
		source_environment_port = sh ( returnStdout: true, script: '''yq -e ".tenant.port" configs/play.yml ''' )
		admin_user = sh ( returnStdout: true, script: '''yq -e ".tenant.admin_username" configs/play.yml ''' )
		source_type = sh ( returnStdout: true, script: '''yq -e ".tenant.type" configs/play.yml ''' )
		repo_user = sh ( returnStdout: true, script: '''yq -e ".repo.user" configs/repo.yml ''' )
		}
		
			
		echo "${source_environment_hostname}"
		echo "${source_environment_port}"
        echo "${admin_user}"
		echo "${source_type}"
		echo "${repo_user}"
	    
	    
	    echo "Verify the repo and create a repo"
	    
	    sh '''
	    pwd
	    chmod +x ./pipelines/scripts/github/*.sh
		
		./pipelines/scripts/github/initializeRepo.sh ${repo_user} ${PAT} ${AZURE_TOKEN} ${repoName} ${devUser} ${featureBranchName} ${HOME_DIR} debug '''
		
		echo "Verified the repo and required branches"
            		}
		}
        }       
	stage('Create and Sync Projects'){
            steps {
		script{
                echo "Create / Sychronize the projects"
				
		sh  pwd
  	LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"
      echo ${LOCAL_DEV_URL}
	  echo ${init}
      if ( ${init} == true ) {
        echo "New repo created"
        ''' pwd
        ls -ltr
        ######## Check & Create Project 
        chmod +x ./pipelines/scripts/*.sh
        ./pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} ${admin_user} ${admin_password} ${repoName}
		'''
      }
      else {
    // Create a feature branch from prod 
        echo "Repo Exists, Check and sync feature branch from Prod"
        if ( ${synchProject} != true ) 
        {
          echo "Patch Initialize"
          if ( -z "${assetID}" ) {
            echo "##vso[task.logissue type=error;]Missing parameter \"assetID\""
            echo "##vso[task.complete result=Failed;]"
            exit 1
          }
                  
          if ( -z "${assetType}" ){
            echo "##vso[task.logissue type=error;]Missing parameter \"assetType\""
            echo "##vso[task.complete result=Failed;]"
            exit 1
          }
          }
          
        else
          echo "Project Initialize"
        }  
          sh rm -rf ./${repoName}

          git clone -b production https://${repo_user}:${PAT}@github.com/${repo_user}/${repoName}.git
          sh cd $(repoName)
          branchExists=$(git ls-remote --exit-code --heads origin ${featureBranchName})
          if ( ! -z "${branchExists// }" ) 
          {
              echo "Branch ${featureBranchName} already exists"
          }
          else {
              echo "Branch ${featureBranchName} doesnt exists, synching from prod ..."
           ''' chmod +x ../${JOB_BASE_NAME}/pipelines/scripts/github/*.sh
              ../${JOB_BASE_NAME}/pipelines/scripts/github/createFeatureFromProdBranch.sh ${devUser} ${featureBranchName} ${HOME_DIR} debug
              # Project Check
              chmod +x ../${JOB_BASE_NAME}/pipelines/scripts/*.sh
              echo "Check and create Project ..."
              ../${JOB_BASE_NAME}/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} ${admin_user} ${admin_password} ${repoName}
              # Import
                  echo "Importing asset ..."
              ../${JOB_BASE_NAME}/pipelines/scripts/importAsset.sh ${LOCAL_DEV_URL} ${admin_user} ${admin_password} ${repoName} ${assetID} ${assetType} ${HOME_DIR} $(synchProject) $(source_type) debug
          '''
               }
				
            }
        }
        stage('Deploy') {
            steps {
		echo "This is deploy step"
		//bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} deploy"
            }
        }
        
	}
}
